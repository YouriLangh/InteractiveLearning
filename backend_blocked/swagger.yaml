openapi: 3.0.0
info:
  title: Interactive Learning Backend API
  description: API documentation for the Interactive Learning platform
  version: 1.0.0
  contact:
    email: 

servers:
  - url: http://localhost:5000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        code:
          type: string
        role:
          type: string
          enum: [STUDENT, TEACHER]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - code
        - role
        - createdAt
        - updatedAt

    Chapter:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        order:
          type: integer
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/Exercise'
      required:
        - id
        - title

    Exercise:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        difficulty:
          type: integer
          minimum: 1
          maximum: 5
        chapterId:
          type: integer
          format: int64
        createdBy:
          type: integer
          format: int64
        visibleTo:
          type: string
          enum: [ALL, TEACHERS_ONLY]
        order:
          type: integer
        stars:
          type: integer
          minimum: 0
          maximum: 5
        answer:
          type: integer
          nullable: true
      required:
        - id
        - title
        - chapterId

    ExerciseAttempt:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum: [PASSED, FAILED]
        attemptsCount:
          type: integer
        hintUsedCount:
          type: integer
        timeTaken:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        studentAnswer:
          type: string
          nullable: true
        exerciseId:
          type: integer
          format: int64
        studentId:
          type: integer
          format: int64
      required:
        - id
        - status
        - exerciseId
        - studentId

    StudentProgress:
      type: object
      properties:
        id:
          type: integer
          format: int64
        studentId:
          type: integer
          format: int64
        chapterId:
          type: integer
          format: int64
        completedExercises:
          type: integer
        successRate:
          type: number
          format: float
        lastUpdated:
          type: string
          format: date-time
      required:
        - id
        - studentId
        - chapterId

    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

paths:
  /api/auth/signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's name
                code:
                  type: string
                  description: User's unique code
                role:
                  type: string
                  enum: [STUDENT, TEACHER]
                  description: User's role in the system
              required:
                - name
                - code
                - role
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Name and code combination already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Authenticate a user and get a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's name
                code:
                  type: string
                  description: User's unique code
                role:
                  type: string
                  enum: [STUDENT, TEACHER]
                  description: User's role in the system
              required:
                - name
                - code
                - role
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid name or code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user/profile:
    get:
      summary: Get the current user's profile
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update the current user's profile
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user/students:
    get:
      summary: Get all students (Teacher only)
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Students retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/chapter:
    get:
      summary: Get all chapters with their exercises
      tags:
        - Chapters
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Chapters retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chapter'
    post:
      summary: Create a new chapter (Teacher only)
      tags:
        - Chapters
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
              required:
                - title
      responses:
        '201':
          description: Chapter created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chapter'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/chapter/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a specific chapter with its exercises
      tags:
        - Chapters
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Chapter retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chapter'
        '404':
          description: Chapter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing chapter (Teacher only)
      tags:
        - Chapters
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
              required:
                - title
      responses:
        '200':
          description: Chapter updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chapter'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a chapter (Teacher only)
      tags:
        - Chapters
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Chapter deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/chapter/{id}/order:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: Update the order of a chapter (Teacher only)
      tags:
        - Chapters
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: integer
              required:
                - order
      responses:
        '200':
          description: Chapter order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chapter'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a specific exercise
      tags:
        - Exercises
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Exercise retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '404':
          description: Exercise not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing exercise (Teacher only)
      tags:
        - Exercises
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                difficulty:
                  type: integer
                  minimum: 1
                  maximum: 5
                visibleTo:
                  type: string
                  enum: [ALL, TEACHERS_ONLY]
                stars:
                  type: integer
                  minimum: 0
                  maximum: 5
                order:
                  type: integer
      responses:
        '200':
          description: Exercise updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an exercise (Teacher only)
      tags:
        - Exercises
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Exercise deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise/chapter/{chapterId}:
    parameters:
      - name: chapterId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get all exercises for a specific chapter
      tags:
        - Exercises
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Exercises retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exercise'

  /api/exercise:
    post:
      summary: Create a new exercise (Teacher only)
      tags:
        - Exercises
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                difficulty:
                  type: integer
                  minimum: 1
                  maximum: 5
                chapterId:
                  type: integer
                  format: int64
                visibleTo:
                  type: string
                  enum: [ALL, TEACHERS_ONLY]
                stars:
                  type: integer
                  minimum: 0
                  maximum: 5
                order:
                  type: integer
              required:
                - title
                - description
                - difficulty
                - chapterId
                - visibleTo
      responses:
        '201':
          description: Exercise created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise/{id}/order:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: Update the order of an exercise (Teacher only)
      tags:
        - Exercises
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: integer
              required:
                - order
      responses:
        '200':
          description: Exercise order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise/{id}/visibility:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: Update the visibility of an exercise (Teacher only)
      tags:
        - Exercises
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                visibleTo:
                  type: string
                  enum: [ALL, TEACHERS_ONLY]
              required:
                - visibleTo
      responses:
        '200':
          description: Exercise visibility updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise/{id}/stars:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: Update the stars of an exercise (Teacher only)
      tags:
        - Exercises
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stars:
                  type: integer
                  minimum: 0
                  maximum: 5
              required:
                - stars
      responses:
        '200':
          description: Exercise stars updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a teacher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise-attempt:
    post:
      summary: Create a new exercise attempt
      tags:
        - Exercise Attempts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exerciseId:
                  type: integer
                  format: int64
              required:
                - exerciseId
      responses:
        '201':
          description: Attempt created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseAttempt'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise-attempt/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a specific attempt
      tags:
        - Exercise Attempts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Attempt retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseAttempt'
        '404':
          description: Attempt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/exercise-attempt/exercise/{exerciseId}:
    parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get all attempts for a specific exercise
      tags:
        - Exercise Attempts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Attempts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExerciseAttempt'

  /api/exercise-attempt/student/{studentId}:
    parameters:
      - name: studentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get all attempts for a specific student
      tags:
        - Exercise Attempts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Attempts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExerciseAttempt'

  /api/exercise-attempt/{id}/answer:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: Submit an answer for an exercise attempt
      tags:
        - Exercise Attempts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                isCorrect:
                  type: boolean
                timeTaken:
                  type: integer
                  minimum: 0
                isCleanup:
                  type: boolean
              required:
                - answer
                - isCorrect
                - timeTaken
      responses:
        '200':
          description: Answer submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseAttempt'
        '404':
          description: Attempt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/progress/{studentId}/chapter/{chapterId}:
    parameters:
      - name: studentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: chapterId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a student's progress for a specific chapter
      tags:
        - Student Progress
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Progress retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProgress'
        '404':
          description: Progress not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a student's progress for a specific chapter
      tags:
        - Student Progress
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                completedExercises:
                  type: integer
                successRate:
                  type: number
                  format: float
              required:
                - completedExercises
                - successRate
      responses:
        '200':
          description: Progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProgress'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/progress/{studentId}:
    parameters:
      - name: studentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get full student progress across all chapters
      tags:
        - Student Progress
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Progress retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  studentId:
                    type: integer
                    format: int64
                  chapters:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                        title:
                          type: string
                        exercises:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                format: int64
                              title:
                                type: string
                              hintsUsed:
                                type: integer
                              attempts:
                                type: array
                                items:
                                  type: boolean
                              timeTaken:
                                type: integer
                              totalTimeSpent:
                                type: integer
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/progress/{studentId}/success-rate:
    parameters:
      - name: studentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a student's overall success rate
      tags:
        - Student Progress
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success rate retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  studentId:
                    type: integer
                    format: int64
                  successRate:
                    type: number
                    format: float
                  totalExercises:
                    type: integer
                  solvedExercises:
                    type: integer
                required:
                  - studentId
                  - successRate
                  - totalExercises
                  - solvedExercises
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload/solve:
    post:
      summary: Process and analyze uploaded image
      tags:
        - Image Processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: Base64 encoded image
                fileType:
                  type: string
                  description: MIME type of the image
                answer:
                  type: integer
                  description: Expected number of dark spots
              required:
                - image
                - fileType
                - answer
      responses:
        '200':
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  darkSpotCount:
                    type: integer
                  processedImage:
                    type: string
                    description: Base64 encoded processed image
                  solved:
                    type: boolean
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 