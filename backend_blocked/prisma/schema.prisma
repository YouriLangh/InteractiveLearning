generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  code     String
  role     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, code])  

  // Relations
  createdExercises Exercise[]        @relation("CreatedExercises")
  attempts         ExerciseAttempt[]
  progress         StudentProgress[]
}

model Chapter {
  id        Int               @id @default(autoincrement())
  title     String
  order     Int               @default(0) // Added for ordering chapters
  exercises Exercise[]
  progress  StudentProgress[]
}

model Exercise {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  difficulty  Int
  chapterId   Int
  createdBy   Int
  visibleTo   String // Changed from Visibility
  order       Int     @default(0) // Added for ordering exercises
  stars       Int     @default(0) // Added for star rating display
  answer      Int?    // Made optional initially
  chapter     Chapter @relation(fields: [chapterId], references: [id])
  teacher     User    @relation("CreatedExercises", fields: [createdBy], references: [id])

  attempts ExerciseAttempt[]
}

model ExerciseAttempt {
  id            Int      @id @default(autoincrement())
  status        String // Changed from AttemptStatus
  attemptsCount Int
  hintUsedCount Int
  createdAt     DateTime @default(now())
  studentAnswer String? // Added for storing student's answer

  exerciseId Int
  studentId  Int

  exercise Exercise @relation(fields: [exerciseId], references: [id])
  student  User     @relation(fields: [studentId], references: [id])
}

model StudentProgress {
  id                 Int      @id @default(autoincrement())
  studentId          Int
  chapterId          Int
  completedExercises Int
  successRate        Float
  lastUpdated        DateTime @default(now()) // Renamed from createdAt

  student User    @relation(fields: [studentId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([studentId, chapterId])
}
